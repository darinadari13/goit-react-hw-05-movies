{"version":3,"file":"static/js/145.f0d4c47c.chunk.js","mappings":"2LAIe,SAASA,EAAT,GAAoC,IAAVC,EAAS,EAATA,MACjCC,EAAG,kBAAcD,EAAME,IAE7B,OAAO,yBAAmB,SAAC,KAAD,CAAMC,GAAIF,EAAV,SAAgBD,EAAMI,SAAhCJ,EAAME,GACvB,CCPD,OAAiB,ECIF,SAASG,EAAT,GAAiC,IAAXC,EAAU,EAAVA,OACnC,OACE,gBAAKC,UAAWC,EAAAA,UAAhB,UACE,eAAID,UAAWC,EAAAA,WAAf,SACGF,EAAOG,KAAI,SAACT,GAAD,OAAW,SAACD,EAAD,CAA+BC,MAAOA,GAAjBA,EAAME,GAAtC,OAInB,C,mHCVc,SAASQ,IACtB,OAA4BC,EAAAA,EAAAA,MAAnBC,GAAT,eAUA,OACE,0BACE,kBAAMC,SATO,SAAAC,GACfA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,OAAOD,MAAME,MAAMC,cAAcC,OAC5CJ,GACLJ,EAAgB,CAAES,OAAQL,GAC3B,EAIG,WACE,kBAEEM,KAAK,OACLC,YAAY,sBACZC,KAAK,WAEP,mBAAQF,KAAK,SAAb,wBAMP,C,aCvBc,SAASG,IAEtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOpB,EAAP,KAAeqB,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAuBlB,EAAAA,EAAAA,MACjBK,GADN,eAC2Bc,IAAI,UAiBjC,OAdEC,EAAAA,EAAAA,YAAU,WACJf,IAEJgB,EAAAA,EAAAA,IAAgBhB,GACfiB,KAAKN,GACLO,OAAM,SAAAC,GAAG,OAAIN,EAASM,EAAIC,QAAjB,GACb,GAAC,CAACpB,KAGHe,EAAAA,EAAAA,YAAU,WACHH,GACLS,MAAMT,EACP,GAAE,CAACA,KAGF,+BACE,gCACA,SAAClB,EAAD,IACCJ,IAAU,SAAC,IAAD,CAAYA,OAAQA,QAIlC,C,+LClCKgC,EAAW,gCACXC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,sBAA2C,CAChEI,OAAQ,CACNC,QAASJ,KAHkB,uBACvBK,EADuB,EACvBA,KADuB,kBAOxBA,EAAKC,SAPmB,2CAAH,qDAUjBb,EAAe,mCAAG,WAAMhB,GAAN,yFACNyB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,gBAAqC,CAC1DI,OAAQ,CACNC,QAASJ,EACTvB,MAAAA,KAJyB,uBACrB4B,EADqB,EACrBA,KADqB,kBAQtBA,EAAKC,SARiB,2CAAH,sDAWfC,EAAe,mCAAG,WAAM5C,GAAN,yFACNuC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BpC,GAAM,CACzDwC,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,GAPsB,2CAAH,sDAUfG,EAAe,mCAAG,WAAMC,GAAN,yFACNP,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BU,EAA9B,YAAiD,CACtEN,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,EAAKK,MAPiB,2CAAH,sDAUfC,EAAe,mCAAG,WAAMF,GAAN,yFACNP,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BU,EAA9B,YAAiD,CACtEN,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,EAAKC,SAPiB,2CAAH,qD","sources":["components/MoviesListItem/MoviesListItem.jsx","components/MovieList/MovieList.module.css","components/MovieList/MovieList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\n\n\nexport default function MoviesListItem({ movie }) {\n  const url = `/movies/${movie.id}`\n\n  return <li key={movie.id}><Link to={url}>{movie.title}</Link></li>;\n};\n\nMoviesListItem.propTypes = {\n  movie: PropTypes.object.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {};","import PropTypes from 'prop-types';\nimport MoviesListItem from '../MoviesListItem/MoviesListItem'\nimport css from './MovieList.module.css';\n\n\nexport default function MoviesList({ movies }) {\n  return (\n    <div className={css.container}>\n      <ul className={css.moviesList}>\n        {movies.map((movie) => <MoviesListItem key={movie.id} movie={movie} />)}\n      </ul>\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\n","import { useSearchParams } from 'react-router-dom';\n\n\nexport default function SearchForm() {\n  const [, setSearchParams] = useSearchParams();\n \n\n  const onSubmit = e => {\n    e.preventDefault();\n    const query = e.target.query.value.toLowerCase().trim();\n    if (!query) return;\n    setSearchParams({ search: query });\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input\n          \n          type=\"text\"\n          placeholder=\"Enter name of movie\"\n          name=\"query\"\n        />\n        <button type=\"submit\">\n          Search\n        </button>\n      </form>\n    </div>\n  );\n}","import { getMovieByQuery } from 'services/api';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport MoviesList from 'components/MovieList/MovieList';\n\nexport default function Movies() {\n\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('search');\n\n\n  useEffect(()=> {\n    if(!query)\n    return;\n    getMovieByQuery(query)\n    .then(setMovies)\n    .catch(err => setError(err.message))\n},[query]);\n\n\nuseEffect(() => {\n  if (!error) return;\n  alert(error);\n}, [error]);\n\nreturn (\n  <>\n    <section>\n    <SearchForm />\n    {movies && <MoviesList movies={movies} />}\n    </section>\n  </>\n)\n}","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '25e4eeadea4cf520d825a9bf9fd0e85d';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await axios.get(`${BASE_URL}movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  \n  return data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const { data } = await axios.get(`${BASE_URL}movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(`${BASE_URL}movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.results;\n};\n"],"names":["MoviesListItem","movie","url","id","to","title","MoviesList","movies","className","css","map","SearchForm","useSearchParams","setSearchParams","onSubmit","e","preventDefault","query","target","value","toLowerCase","trim","search","type","placeholder","name","Movies","useState","setMovies","error","setError","get","useEffect","getMovieByQuery","then","catch","err","message","alert","BASE_URL","API_KEY","getTrendingMovies","axios","params","api_key","data","results","getMovieDetails","getMovieCredits","movieId","cast","getMovieReviews"],"sourceRoot":""}