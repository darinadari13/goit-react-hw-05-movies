{"version":3,"file":"static/js/693.356638b5.chunk.js","mappings":"4LACe,SAASA,IACtB,OACA,0BACA,SAAC,KAAD,CACAC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,eACVC,aAAc,CAACC,SAAU,QACzBC,IAAK,MACLC,KAAM,MACNC,UAAW,yBACXC,SAAS,KAIV,C,2GChBD,EAAuB,mBAAvB,EAAqD,uB,kBCGtC,SAASC,EAAT,GAA8B,IAAVC,EAAS,EAATA,MACzBC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,UAAWC,EAAiBH,EAAjBG,aAEzB,OACE,gBAAIC,UAAWC,EAAf,WACE,gBACEC,IAAKH,EAAY,yCAAqCA,GAAiBI,EACvEC,IAAKP,KAEP,0BAAOA,KACP,0CAAkBC,OAIvB,CCdc,SAASO,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAC7B,OACE,eAAIN,UAAWC,EAAf,SACGK,EAAKC,KAAI,SAACX,GAAD,OAAW,SAACD,EAAD,CAAyBC,MAAOA,GAAjBA,EAAMY,GAAhC,KAIf,C,aCLc,SAASC,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAON,EAAP,KAAaO,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,IACXE,EAAAA,EAAAA,IAAgBT,GACbU,KAAKP,GACLQ,OAAM,SAAAC,GAAG,OAAIP,EAASO,EAAIC,QAAjB,IACTC,SAAQ,kBAAMP,GAAW,EAAjB,GACZ,GAAE,CAACP,KAGJQ,EAAAA,EAAAA,YAAU,WACHJ,GACLW,MAAMX,EACP,GAAE,CAACA,KAGF,iCACE,6BACGR,IAAQ,SAACD,EAAD,CAAMC,KAAMA,MAEtBU,IAAW,SAAChC,EAAA,EAAD,MAGjB,C,+LCjCK0C,EAAW,gCACXC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,sBAA2C,CAChEI,OAAQ,CACNC,QAASJ,KAHkB,uBACvBK,EADuB,EACvBA,KADuB,kBAOxBA,EAAKC,SAPmB,2CAAH,qDAUjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,EAAAA,EAAAA,IAAA,UAAaH,EAAb,gBAAqC,CAC1DI,OAAQ,CACNC,QAASJ,EACTQ,MAAAA,KAJyB,uBACrBH,EADqB,EACrBA,KADqB,kBAQtBA,EAAKC,SARiB,2CAAH,sDAWfG,EAAe,mCAAG,WAAM5B,GAAN,yFACNqB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BlB,GAAM,CACzDsB,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,GAPsB,2CAAH,sDAUfb,EAAe,mCAAG,WAAMT,GAAN,yFACNmB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BhB,EAA9B,YAAiD,CACtEoB,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,EAAK1B,MAPiB,2CAAH,sDAUf+B,EAAe,mCAAG,WAAM3B,GAAN,yFACNmB,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iBAA8BhB,EAA9B,YAAiD,CACtEoB,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,EAAKC,SAPiB,2CAAH,qD","sources":["components/Loader.jsx","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/CastItem.jsx","components/Cast/Cast.jsx","pages/CastPage/CastPage.jsx","services/api.js"],"sourcesContent":["import { Bars } from  'react-loader-spinner';\nexport default function Loader() {\n  return (\n  <div>\n  <Bars\n  height=\"80\"\n  width=\"80\"\n  color=\"#4fa94d\"\n  ariaLabel=\"bars-loading\"\n  wrapperStyle={{position: \"fixed\",\n  top: \"50%\", \n  left: \"50%\", \n  transform: \"translate(-50%, -50%)\"}}\n  visible={true}\n/>\n</div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\",\"listItem\":\"Cast_listItem__UvJjd\"};","import PropTypes from 'prop-types';\nimport css from './Cast.module.css';\nimport img from '../../img/image-not-available.png';\n\nexport default function CastItem({ actor }) {\n  const { name, character, profile_path } = actor\n\n  return (\n    <li className={css.listItem}>\n      <img \n        src={profile_path ? `https://image.tmdb.org/t/p/w300${profile_path}` : img}\n        alt={name}\n      />\n      <span>{name}</span>\n      <span>Charecter: {character}</span>\n    </li>\n  )\n\n}\n\nCastItem.propTypes = {\n  actor: PropTypes.object.isRequired,\n};","import PropTypes from 'prop-types';\nimport css from './Cast.module.css';\nimport CastItem from './CastItem';\n\nexport default function Cast({ cast }) {\n  return (\n    <ul className={css.list}>\n      {cast.map((actor) => <CastItem key={actor.id} actor={actor} />)}\n    </ul>\n  )\n\n}\n\nCast.propTypes = {\n  cast: PropTypes.array.isRequired,\n};\n\n","import {useState, useEffect} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'services/api';\nimport Cast from 'components/Cast/Cast';\nimport Loader from 'components/Loader';\n\nexport default function CastDetails() {  \n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true)\n    getMovieCredits(movieId)\n      .then(setCast)\n      .catch(err => setError(err.message))\n      .finally(() => setLoading(false))\n  }, [movieId]);\n\n\n  useEffect(() => {\n    if (!error) return;\n    alert(error);\n  }, [error]);\n\n  return (\n    <>\n      <section>\n        {cast && <Cast cast={cast} />}\n      </section>\n      {loading && <Loader />}\n    </>\n  );\n}","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '25e4eeadea4cf520d825a9bf9fd0e85d';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await axios.get(`${BASE_URL}movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  \n  return data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const { data } = await axios.get(`${BASE_URL}movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(`${BASE_URL}movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data.results;\n};\n"],"names":["Loader","height","width","color","ariaLabel","wrapperStyle","position","top","left","transform","visible","CastItem","actor","name","character","profile_path","className","css","src","img","alt","Cast","cast","map","id","CastDetails","movieId","useParams","useState","setCast","error","setError","loading","setLoading","useEffect","getMovieCredits","then","catch","err","message","finally","alert","BASE_URL","API_KEY","getTrendingMovies","axios","params","api_key","data","results","getMovieByQuery","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}